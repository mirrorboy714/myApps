#include "ofApp.h"

//--------------------------------------------------------------
void ofApp::setup(){
	 
    	camWidth = 160;  // try to grab at this size.
	camHeight = 120;

    	//we can now get back a list of devices.
    	vector<ofVideoDevice> devices = vidGrabber.listDevices();
	
    	for(int i = 0; i < devices.size(); i++){
        	if(devices[i].bAvailable){
            		ofLogNotice() << devices[i].id << ": " << devices[i].deviceName;
        	}else{
            		ofLogNotice() << devices[i].id << ": " << devices[i].deviceName << " - unavailable ";
        	}
    	}

    	vidGrabber.setDeviceID(0);
    	vidGrabber.setDesiredFrameRate(60);
    	vidGrabber.initGrabber(camWidth, camHeight);

	colorImg.allocate(camWidth,camHeight,OF_IMAGE_COLOR);
	fbo.allocate(camWidth,camHeight,GL_RGB);

	finder.setup("haarcascade_frontalface_default.xml");
}

//--------------------------------------------------------------
void ofApp::update(){

	vidGrabber.update();	
	
	if(vidGrabber.isFrameNew())
	{
		fbo.begin();
			vidGrabber.draw(0,0,fbo.getWidth(),fbo.getHeight());
		fbo.end();

		fbo.readToPixels(colorImg);
		
	//	colorImg.setFromPixels(fbo.getPixels().getData(),camWidth,camHeight,OF_IMAGE_COLOR);
		finder.findHaarObjects(colorImg);
	}

}

//--------------------------------------------------------------
void ofApp::draw(){
	ofNoFill();

	colorImg.draw(0, 0);
	for(unsigned int i = 0; i < finder.blobs.size(); i++) {
		ofRectangle cur = finder.blobs[i].boundingRect;
		ofDrawRectangle(cur.x, cur.y, cur.width, cur.height);
	}
}

//--------------------------------------------------------------
void ofApp::keyPressed(int key){

}

//--------------------------------------------------------------
void ofApp::keyReleased(int key){

}

//--------------------------------------------------------------
void ofApp::mouseMoved(int x, int y ){

}

//--------------------------------------------------------------
void ofApp::mouseDragged(int x, int y, int button){

}

//--------------------------------------------------------------
void ofApp::mousePressed(int x, int y, int button){

}

//--------------------------------------------------------------
void ofApp::mouseReleased(int x, int y, int button){

}

//--------------------------------------------------------------
void ofApp::mouseEntered(int x, int y){

}

//--------------------------------------------------------------
void ofApp::mouseExited(int x, int y){

}

//--------------------------------------------------------------
void ofApp::windowResized(int w, int h){

}

//--------------------------------------------------------------
void ofApp::gotMessage(ofMessage msg){

}

//--------------------------------------------------------------
void ofApp::dragEvent(ofDragInfo dragInfo){ 

}
